<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Course Feedback - Coaching & Leadership</title>
    <!-- Favicon Links (Consistent) -->
    <link rel="apple-touch-icon" sizes="180x180" href="https://cdn-icons-png.flaticon.com/512/3281/3281289.png">
    <link rel="icon" type="image/png" sizes="32x32" href="https://cdn-icons-png.flaticon.com/512/3281/3281289.png">
    <link rel="icon" type="image/png" sizes="16x16" href="https://cdn-icons-png.flaticon.com/512/3281/3281289.png">
    <style>
        /* --- Base Styles (Consistent - Copied from final-assessment) --- */
        * { margin: 0; padding: 0; box-sizing: border-box; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; }
        body { background-color: #f8fafc; margin: 0; padding: 0; line-height: 1.6; color: #374151; display: flex; flex-direction: column; min-height: 100vh; padding-top: 62px; /* Space for fixed header */ }
        main { flex-grow: 1; display: flex; justify-content: center; align-items: center; /* Center form vertically */ flex-direction: column; width: 100%; max-width: 650px; /* Adjusted max-width for form */ margin: 20px auto; padding: 0 20px; }

        /* User Bar (Consistent - Copied from final-assessment) */
        .user-bar { background-color: #34495e; padding: 10px 20px; display: flex; justify-content: space-between; align-items: center; color: white; font-size: 14px; position: fixed; top: 0; left: 0; width: 100%; z-index: 1001; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }
        .user-info { display: flex; align-items: center; gap: 12px; }
        .user-info svg { opacity: 0.8; vertical-align: middle; color: white; }
        .user-details-bar { display: flex; flex-direction: column; }
        .user-name-bar { font-weight: 600; font-size: 14px; color: white; }
        .user-email-bar { font-size: 12px; opacity: 0.8; color: white; }
        .logout-button { background-color: #e74c3c; color: white; border: none; padding: 8px 15px; border-radius: 6px; cursor: pointer; font-weight: 500; transition: all 0.3s ease; display: flex; align-items: center; gap: 6px; font-size: 13px; }
        .logout-button:hover { background-color: #c0392b; transform: translateY(-1px); }
        .logout-button svg { color: white; }

        /* Footer (Consistent - Copied from final-assessment) */
        .footer { text-align: center; padding: 25px 30px; background: #f9fafb; color: #6b7280; margin-top: auto; font-size: 14px; width: 100%; border-top: 1px solid #e5e7eb; }

        /* --- Feedback Form Styles (Adapted from course-feedback-form1) --- */
        .feedback-form-container {
            width: 100%; /* Take full width of main */
            margin: 0 auto; /* Centered within main */
            padding: 30px 40px; /* Adjusted padding */
            background-color: #ffffff;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            border: 1px solid #e5e7eb; /* Added border for consistency */
        }

        .feedback-form-container h2 {
            text-align: center;
            color: #1f2937; /* Consistent heading color */
            margin-bottom: 15px;
            font-size: 1.8rem; /* Slightly larger */
            font-weight: 600;
             border-bottom: 1px solid #e5e7eb; /* Consistent border */
             padding-bottom: 15px;
        }

        .feedback-form-container p.intro-text { /* Added class for intro */
            text-align: center;
            color: #4b5563; /* Slightly darker grey */
            margin-bottom: 30px;
            font-size: 1rem;
        }

        .form-group {
            margin-bottom: 25px; /* Increased spacing */
        }

        .form-group label {
            display: block;
            font-weight: 600;
            margin-bottom: 8px;
            color: #374151; /* Consistent label color */
            font-size: 1.05rem; /* Slightly larger label */
        }
        .form-group label span.required { /* Style for asterisk */
            color: #ef4444; /* Red color for asterisk */
            margin-left: 2px;
        }

        .form-group input[type="text"],
        .form-group input[type="email"],
        .form-group textarea {
            width: 100%;
            padding: 12px 15px; /* Adjusted padding */
            border: 1px solid #d1d5db; /* Consistent border */
            border-radius: 6px; /* Consistent radius */
            font-size: 1rem;
            color: #1f2937;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
        }
        .form-group textarea {
            min-height: 100px; /* Adjusted height */
            resize: vertical;
        }

        .form-group input[type="text"]:focus,
        .form-group input[type="email"]:focus,
        .form-group textarea:focus {
            border-color: #3b82f6; /* Consistent focus color */
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.15); /* Consistent focus shadow */
            outline: none;
        }

        .rating-group-label { /* Added separate label for accessibility */
             display: block;
             font-weight: 600;
             margin-bottom: 10px;
             color: #374151;
             font-size: 1.05rem;
        }
        .rating-group {
            display: flex;
            justify-content: space-around; /* Better spacing */
            align-items: center;
            padding: 15px 10px; /* Adjusted padding */
            border: 1px solid #d1d5db; /* Consistent border */
            border-radius: 6px;
            background-color: #f9fafb; /* Light background */
        }

        .rating-group label {
            display: flex;
            flex-direction: column;
            align-items: center;
            cursor: pointer;
            font-weight: 500; /* Slightly bolder */
            margin-bottom: 0;
            color: #4b5563;
            transition: color 0.3s ease, transform 0.2s ease;
            padding: 5px 10px; /* Added horizontal padding */
            border-radius: 4px; /* Rounded corners for hover effect */
        }

        .rating-group input[type="radio"] {
            margin-bottom: 6px; /* More space */
            cursor: pointer;
            /* Make radio buttons slightly larger and easier to click */
            width: 1.1em;
            height: 1.1em;
            accent-color: #3b82f6; /* Color the check part */
        }

        .rating-group input[type="radio"]:checked + span {
             font-weight: 700; /* Bolder when checked */
             color: #1d4ed8; /* Darker blue when checked */
        }

        .rating-group label:hover {
            color: #3b82f6;
            background-color: #eff6ff; /* Light blue background on hover */
            /* transform: scale(1.05); */ /* Optional: subtle scale */
        }


        /* Submit Button Styling (Consistent Feel) */
        .submit-btn {
            display: block;
            width: 100%;
            padding: 12px 25px; /* Consistent padding */
            background-color: #10b981; /* Emerald green */
            color: #ffffff;
            border: none;
            border-radius: 8px; /* Consistent radius */
            font-size: 1.1rem;
            font-weight: 600; /* Consistent weight */
            cursor: pointer;
            text-align: center;
            transition: background-color 0.3s ease, transform 0.1s ease;
            margin-top: 15px; /* More space above button */
        }

        .submit-btn:hover {
            background-color: #059669; /* Darker green */
            transform: translateY(-2px); /* Subtle lift */
            box-shadow: 0 4px 10px rgba(16, 185, 129, 0.2);
        }

        .submit-btn:active {
             background-color: #047857;
             transform: translateY(0px);
             box-shadow: none;
        }
         .submit-btn:disabled {
             background-color: #9ca3af; cursor: not-allowed; transform: none; box-shadow: none;
         }


        /* Success/Failure Message Styling */
        .message {
            text-align: center;
            font-size: 1.1rem;
            margin-top: 25px; /* More space */
            padding: 15px 20px; /* More padding */
            border-radius: 8px; /* Consistent radius */
            display: none; /* Hidden by default */
            border-left-width: 5px;
            border-left-style: solid;
        }

        .message.success {
            background-color: #f0fdf4; /* Lighter green background */
            color: #14532d; /* Darker green text */
            border-color: #10b981; /* Green border */
        }

        .message.error {
            background-color: #fef2f2; /* Lighter red background */
            color: #991b1b; /* Darker red text */
            border-color: #ef4444; /* Red border */
        }

        /* Responsive Design Adjustments */
        @media (max-width: 768px) {
            body { padding-top: 62px; } /* Ensure header space */
            main { padding: 0 15px; margin: 15px auto; max-width: 95%;}
            .feedback-form-container { padding: 25px; }
            .feedback-form-container h2 { font-size: 1.5rem; }
            .user-bar { padding: 10px 15px; } /* Adjust padding */
            .rating-group { flex-wrap: wrap; justify-content: center; gap: 10px;} /* Wrap ratings on small screens */
            .rating-group label { padding: 5px 8px; }
        }
         @media (max-width: 480px) {
            .feedback-form-container { padding: 20px 15px; }
            .form-group label { font-size: 1rem; }
            .form-group input, .form-group textarea { padding: 10px 12px; }
            .submit-btn { font-size: 1rem; padding: 10px 20px; }
             .rating-group label span { font-size: 0.9rem; }
             .rating-group input[type="radio"] { width: 1em; height: 1em; }
         }

    </style>
</head>
<body>

    <!-- User Bar (Copied from final-assessment.html) -->
    <div class="user-bar">
        <div class="user-info">
             <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path><circle cx="12" cy="7" r="4"></circle></svg>
            <div class="user-details-bar">
                <span class="user-name-bar" id="userNameBar">Loading...</span>
                <span class="user-email-bar" id="userEmailBar"></span>
            </div>
        </div>
        <button class="logout-button" onclick="logout()">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path><polyline points="16 17 21 12 16 7"></polyline><line x1="21" y1="12" x2="9" y2="12"></line></svg>
            Logout
        </button>
    </div>

    <!-- Main Content Area -->
    <main>
        <div class="feedback-form-container">
            <h2>Course Feedback</h2>
            <p class="intro-text">We appreciate you taking the time to share your thoughts about the course!</p>

            <form id="courseFeedbackForm" action="#" method="POST" novalidate> <!-- Added novalidate -->

                <div class="form-group">
                    <!-- Pre-fill name and email if possible, make read-only or hidden -->
                    <label for="userName">Name <span class="required">*</span></label>
                    <input type="text" id="userName" name="userName" placeholder="Enter your name" required readonly> <!-- Make read-only -->
                    <small style="font-size: 0.8rem; color: #6b7280;">Your name from your profile.</small>
                </div>

                <div class="form-group">
                    <label for="userEmail">Email <span class="required">*</span></label>
                    <input type="email" id="userEmail" name="userEmail" placeholder="Enter your email address" required readonly> <!-- Make read-only -->
                     <small style="font-size: 0.8rem; color: #6b7280;">Your email from your profile.</small>
                </div>

                <div class="form-group">
                    <label id="rating-label" class="rating-group-label">Overall Rating <span class="required">*</span></label>
                    <div class="rating-group" role="radiogroup" aria-labelledby="rating-label">
                        <label>
                            <input type="radio" id="rating1" name="rating" value="1" required>
                            <span>1 (Poor)</span>
                        </label>
                        <label>
                            <input type="radio" id="rating2" name="rating" value="2" required>
                            <span>2 (Fair)</span>
                        </label>
                        <label>
                            <input type="radio" id="rating3" name="rating" value="3" required>
                            <span>3 (Good)</span>
                        </label>
                        <label>
                            <input type="radio" id="rating4" name="rating" value="4" required>
                            <span>4 (Very Good)</span>
                        </label>
                        <label>
                            <input type="radio" id="rating5" name="rating" value="5" required>
                            <span>5 (Excellent)</span>
                        </label>
                    </div>
                    <div class="error-message" id="rating_error" style="color: #ef4444; font-size: 0.9rem; margin-top: 5px; display: none;">Please select a rating.</div>
                </div>

                <div class="form-group">
                    <label for="comments">Additional Comments <span class="required">*</span></label>
                    <textarea id="comments" name="comments" rows="5" placeholder="Share your thoughts, suggestions, or specific feedback about the course content, structure, or delivery." required></textarea> <!-- Updated rows and placeholder -->
                     <div class="error-message" id="comments_error" style="color: #ef4444; font-size: 0.9rem; margin-top: 5px; display: none;">Please provide your comments.</div>
                </div>

                <button type="submit" id="submitFeedbackBtn" class="submit-btn">Submit Feedback</button>

            </form>

            <!-- ** MODIFIED ** Success/Failure Message -->
            <div id="message" class="message"></div>
        </div>
    </main>

    <!-- Footer (Copied from final-assessment.html) -->
    <footer class="footer">
        © 2025 Elmenisy Leadership Coaching - All Rights Reserved
    </footer>

    <script>
        // --- Constants (Copied from final-assessment) ---
        const LOGGED_IN_KEY = 'isUserLoggedIn';
        const CURRENT_USER_KEY = 'currentUser';

        // --- Get User Data Function (Copied from final-assessment) ---
        function getLocalStorageUser() {
            try {
                const userDataString = localStorage.getItem(CURRENT_USER_KEY);
                if (!userDataString) return null;
                // Basic parse, more robust validation might be needed depending on usage
                return JSON.parse(userDataString);
            } catch (error) {
                console.error("Error parsing user data:", error);
                return null;
            }
        }

         // --- Populate Top Bar Function (Copied from final-assessment) ---
         function populateTopBar(user) {
            const userNameElement = document.getElementById('userNameBar');
            const userEmailElement = document.getElementById('userEmailBar');
            const userNameInput = document.getElementById('userName'); // Input field for name
            const userEmailInput = document.getElementById('userEmail'); // Input field for email

            if (user && userNameElement && userEmailElement) {
                const name = user.name || 'User';
                const email = user.email || 'N/A';
                userNameElement.textContent = name;
                userEmailElement.textContent = email;

                // Pre-fill the form fields and make them readonly
                if (userNameInput) {
                    userNameInput.value = name;
                    userNameInput.readOnly = true;
                 }
                 if (userEmailInput) {
                    userEmailInput.value = email;
                    userEmailInput.readOnly = true;
                 }

            } else {
                if(userNameElement) userNameElement.textContent = 'N/A';
                if(userEmailElement) userEmailElement.textContent = 'N/A';
                 // Optionally disable form if user data is missing
                 // document.getElementById('courseFeedbackForm').style.display = 'none';
                 // document.getElementById('message').textContent = 'Could not load user data.';
                 // document.getElementById('message').className = 'message error';
                 // document.getElementById('message').style.display = 'block';
            }
        }

        // --- Logout Function (Copied from final-assessment) ---
        function logout() {
            console.log("Logging out...");
            try {
                localStorage.removeItem(LOGGED_IN_KEY);
                localStorage.removeItem(CURRENT_USER_KEY);
                window.location.href = 'login.html'; // Redirect to login page
            } catch (e) {
                console.error("Logout error:", e);
                window.location.href = 'login.html'; // Fallback redirect
            }
        }


        // --- Page Initialization ---
        document.addEventListener('DOMContentLoaded', function() {
            // 1. Check Login Status
            const isLoggedIn = localStorage.getItem(LOGGED_IN_KEY) === 'true';
            if (!isLoggedIn) {
                console.warn("User not logged in. Redirecting to login.");
                window.location.replace('login.html'); // Use replace to prevent back button history
                return; // Stop further execution
            }

            // 2. Get User Data
            const currentUser = getLocalStorageUser();
            if (!currentUser) {
                console.error("Failed to load user data from localStorage.");
                // Handle error appropriately - maybe show an error message on the page
                // For now, we'll attempt to populate the bar with defaults
                populateTopBar(null);
                // Consider disabling the form or showing an error
                return;
            }

            // 3. Populate Top Bar & Form Fields
            populateTopBar(currentUser);

            // 4. Setup Form Submission Handler
            const feedbackForm = document.getElementById('courseFeedbackForm');
            const messageElement = document.getElementById('message');
            const submitButton = document.getElementById('submitFeedbackBtn');

            feedbackForm.addEventListener('submit', function(event) {
                event.preventDefault(); // Prevent default form submission
                console.log("Feedback form submission attempt.");

                // Basic Client-Side Validation
                let isValid = true;
                const rating = feedbackForm.querySelector('input[name="rating"]:checked');
                const comments = document.getElementById('comments').value.trim();
                const ratingError = document.getElementById('rating_error');
                const commentsError = document.getElementById('comments_error');

                // Reset errors
                ratingError.style.display = 'none';
                commentsError.style.display = 'none';
                document.getElementById('comments').classList.remove('invalid'); // Assuming an 'invalid' class for styling

                 if (!rating) {
                     ratingError.style.display = 'block';
                     isValid = false;
                     console.warn("Validation failed: Rating not selected.");
                 }
                 if (comments === '') {
                     commentsError.style.display = 'block';
                     document.getElementById('comments').classList.add('invalid');
                     isValid = false;
                     console.warn("Validation failed: Comments are empty.");
                 }

                if (!isValid) {
                    messageElement.textContent = 'Please fix the errors before submitting.';
                    messageElement.className = 'message error';
                    messageElement.style.display = 'block';
                    return; // Stop submission
                }

                // Simulate sending data (replace with actual fetch/AJAX call if needed)
                console.log("Form is valid. Simulating submission...");
                submitButton.disabled = true;
                submitButton.textContent = 'Submitting...';

                // Simulate network delay
                setTimeout(() => {
                    // --- ** UPDATED SUCCESS MESSAGE ** ---
                    messageElement.innerHTML = 'Thank you for submitting your feedback! Your input helps us improve the course. We appreciate your time and effort.';
                    messageElement.className = 'message success'; // Apply success styling
                    messageElement.style.display = 'block'; // Show the message

                    // Optionally hide the form or disable fields permanently after success
                    feedbackForm.style.opacity = '0.5'; // Dim the form
                    feedbackForm.style.pointerEvents = 'none'; // Prevent further interaction
                    // feedbackForm.reset(); // Clear form fields (optional)

                    // Hide the submit button or change its text permanently
                     submitButton.textContent = 'Feedback Submitted';
                    // submitButton.style.display = 'none'; // Or hide it


                    // --- HERE you would typically send the data to your server ---
                    // const formData = new FormData(feedbackForm);
                    // fetch('/api/submit-feedback', { method: 'POST', body: formData })
                    //   .then(response => response.json())
                    //   .then(data => { console.log('Success:', data); /* Show success message */ })
                    //   .catch((error) => { console.error('Error:', error); /* Show error message */ });
                    // --------------------------------------------------------------

                     console.log("Feedback submitted (simulated).");

                }, 1000); // Simulate 1 second delay

            });
        });

    </script>

</body>
</html>
